{"version":3,"file":"background/background.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAMA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","sources":["webpack://revisewise-extension/./src/services/api/api-client.js","webpack://revisewise-extension/webpack/bootstrap","webpack://revisewise-extension/webpack/runtime/define property getters","webpack://revisewise-extension/webpack/runtime/hasOwnProperty shorthand","webpack://revisewise-extension/webpack/runtime/make namespace object","webpack://revisewise-extension/./src/background/background.js"],"sourcesContent":["class ApiClient {\n  constructor() {\n    this.baseUrl = 'http://localhost:3000/api/v1';\n  }\n\n  async explain(text, user) {\n    try {\n      const token = user.token || user.getIdToken;\n\n      if (!token) {\n        throw new Error('No authentication token available');\n      }\n\n      console.log('Using token:', token);\n\n      const response = await fetch(`${this.baseUrl}/query`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          text,\n          userId: user.uid\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `API error: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n}\n\nexport const apiClient = new ApiClient(); ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Basic background script\nconsole.log('ReviseWise: Background service worker initialized');\n\nimport { apiClient } from '../services/api/api-client.js';\n\n// Create context menu item\nchrome.runtime.onInstalled.addListener(() => {\n  chrome.contextMenus.create({\n    id: 'explain-text',\n    title: 'Explain with ReviseWise',\n    contexts: ['selection']\n  });\n});\n\n// Handle context menu clicks\nchrome.contextMenus.onClicked.addListener(async (info, tab) => {\n  if (info.menuItemId === 'explain-text' && tab?.id) {\n    try {\n      // Check if the URL is valid for content script injection\n      if (!isValidUrl(tab.url)) {\n        console.warn('Cannot inject content script into this page:', tab.url);\n        return;\n      }\n\n      // Ensure content script is loaded\n      await ensureContentScriptLoaded(tab.id);\n      await handleExplainRequest(info.selectionText, tab.id);\n    } catch (error) {\n      console.error('Error handling context menu click:', error);\n    }\n  }\n});\n\n// Function to check if URL is valid for content script injection\nfunction isValidUrl(url) {\n  return url && \n         !url.startsWith('chrome://') && \n         !url.startsWith('chrome-extension://') &&\n         !url.startsWith('edge://') &&\n         !url.startsWith('about:') &&\n         !url.startsWith('chrome-error://');\n}\n\n// Function to ensure content script is loaded\nasync function ensureContentScriptLoaded(tabId) {\n  try {\n    await chrome.tabs.sendMessage(tabId, { type: 'PING' });\n  } catch (error) {\n    // Only inject if it's not already loaded\n    if (error.message.includes('Could not establish connection')) {\n      await chrome.scripting.executeScript({\n        target: { tabId },\n        files: ['content/content.js']\n      });\n    } else {\n      throw error; // Re-throw other errors\n    }\n  }\n}\n\nasync function handleExplainRequest(text, tabId) {\n  try {\n    await chrome.tabs.sendMessage(tabId, {\n      type: 'SHOW_LOADING'\n    });\n\n    const user = await getCurrentUser();\n    console.log('Current user:', user);\n\n    if (!user) {\n      await chrome.tabs.sendMessage(tabId, {\n        type: 'SHOW_ERROR',\n        payload: 'Please sign in to use ReviseWise'\n      });\n      return;\n    }\n\n    if (!user.token && !user.getIdToken) {\n      await chrome.tabs.sendMessage(tabId, {\n        type: 'SHOW_ERROR',\n        payload: 'Authentication token not found. Please sign in again.'\n      });\n      return;\n    }\n\n    const response = await apiClient.explain(text, user);\n\n    // Format the response with usage info\n    const formattedResponse = `\n      <div style=\"white-space: pre-wrap;\">${response.answer}</div>\n      <div class=\"revisewise-metadata\">\n        <div class=\"metadata-item\">\n          <span class=\"label\">Tokens used:</span>\n          <span class=\"value\">${response.metadata.tokens}</span>\n        </div>\n        <div class=\"metadata-item\">\n          <span class=\"label\">Queries today:</span>\n          <span class=\"value\">${response.metadata.usage.queries_today}</span>\n        </div>\n        <div class=\"metadata-item\">\n          <span class=\"label\">Remaining:</span>\n          <span class=\"value\">${response.metadata.usage.remaining_today}</span>\n        </div>\n      </div>\n    `;\n\n    await chrome.tabs.sendMessage(tabId, {\n      type: 'SHOW_EXPLANATION',\n      payload: formattedResponse\n    });\n\n    // Update popup with latest usage\n    updatePopupUsage(response.metadata.usage);\n\n  } catch (error) {\n    console.error('Error handling explain request:', error);\n    if (tabId) {\n      await chrome.tabs.sendMessage(tabId, {\n        type: 'SHOW_ERROR',\n        payload: error.message || 'Failed to get explanation'\n      });\n    }\n  }\n}\n\n// Helper function to update popup usage display\nasync function updatePopupUsage(usage) {\n  try {\n    await chrome.storage.local.set({ usage });\n    \n    // Show notification if running low on queries\n    if (usage.remaining_today <= 5) {\n      chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'assets/icons/icon48.png',\n        title: 'ReviseWise Usage Alert',\n        message: `Only ${usage.remaining_today} queries remaining today!`,\n        priority: 2\n      });\n    }\n  } catch (error) {\n    console.error('Error updating usage:', error);\n  }\n}\n\n// Helper function to get current user with more detailed logging\nasync function getCurrentUser() {\n  return new Promise((resolve) => {\n    chrome.storage.local.get(['user'], (result) => {\n      console.log('Storage result:', result); // Debug log\n      resolve(result.user || null);\n    });\n  });\n}\n\n// This will be expanded later for context menu and message handling "],"names":[],"sourceRoot":""}